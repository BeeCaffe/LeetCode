/***********************************************************************************************************************
 * Created by caffe on 2019/12/11.
 * 70. 爬楼梯
 * 假设你正在爬楼梯。需要 n 阶你才能到达楼顶。

    每次你可以爬 1 或 2 个台阶。你有多少种不同的方法可以爬到楼顶呢？

    注意：给定 n 是一个正整数。
 **********************************************************************************************************************/
/**
 * solution 1 ： 动态规划
 * 假设当前为第i阶梯子，那么可能是从i-2阶跨两步过来的，也可能是i-1阶跨一步过来的，所以有递推关系：
 * dp[i]=dp[i-1]+dp[i-2].
 * 时间复杂度：O（n）
 * 空间复杂度：O（n）
 */
//执行用时 :4 ms, 在所有 cpp 提交中击败了65.09% 的用户
//内存消耗 :8.4 MB, 在所有 cpp 提交中击败了58.65%的用户
class Solution {
public:
    int climbStairs(int n) {
        if(n<2) return 1;
        vector<int> dp(n,0);
        dp[0]=1;
        dp[1]=2;
        for(int i=2;i<n;++i) dp[i]=dp[i-1]+dp[i-2];
        return dp[n-1];
    }
};